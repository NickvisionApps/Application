app_id := "org.nickvision.application"
project_name := "NickvisionApplication"
short_name := "application"

dotnet_runtime := if arch() == "arm" {
    "linux-arm"
} else if arch() == "aarch64" {
    "linux-arm64"
} else {
    "linux-x64"
}

builddir := env_var_or_default('NICK_BUILDDIR', '_nickbuild')
lib := "lib" # this is added to installation prefix, see "publish" recipe for details

# List all recipes
default:
    @just --list

# Run the application without installing
run:
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    dotnet build
    glib-compile-resources --sourcedir ./Resources \
    ./Resources/{{app_id}}.gresource.xml
    mv ./Resources/{{app_id}}.gresource ./bin/Debug/net7.0/
    while read lang_code; do \
        mkdir -p ./bin/Debug/net7.0/$lang_code; \
        msgfmt ../{{project_name}}.Shared/Resources/po/${lang_code}.po -o /bin/Debug/net7.0/$lang_code/{{short_name}}.mo; \
    done << ../{{project_name}}.Shared/Resources/po/LINGUAS
    dotnet run
    rm Blueprints/*.ui

# Publish the app
publish PREFIX LIB_DIR=lib: clean && (_install_extras PREFIX)
    #!/bin/sh
    # LIB_DIR id added to prefix.
    # For example, for PREFIX "/usr" and LIB_DIR "lib"
    # all dll and so files will go to "/usr/lib".
    # Resources will go to {{PREFIX}}/shared.
    # Build directory is "_nickbuild" by default,
    # use NICK_BUILDDIR env var to change it.

    echo -e "\033[1m# Publishing the app\033[0m"
    mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    [ $? != 0 ] && exit 1
    dotnet publish -c Release {{project_name}}.GNOME.csproj \
        --runtime {{dotnet_runtime}} \
        --self-contained false \
        -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    success=$?
    rm Blueprints/*.ui
    if [ $success != 0 ]
    then
        exit $success
    fi
    while read lang_code; do \
        mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}/$lang_code; \
        msgfmt ../{{project_name}}.Shared/Resources/po/${lang_code}.po -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}/$lang_code/{{short_name}}.mo; \
    done < ../{{project_name}}.Shared/Resources/po/LINGUAS
    mkdir -p {{builddir}}{{PREFIX}}/bin
    cat > {{builddir}}{{PREFIX}}/bin/{{app_id}} << EOF
    #!/bin/sh
    exec dotnet {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}.GNOME.dll \$@
    EOF
    chmod +x {{builddir}}{{PREFIX}}/bin/{{app_id}}

# Publish the app (self-contained)
publish-self-contained PREFIX LIB_DIR=lib: clean && (_install_extras PREFIX)
    #!/bin/sh
    # LIB_DIR id added to prefix.
    # For example, for PREFIX "/usr" and LIB_DIR "lib"
    # all dll and so files will go to "/usr/lib".
    # Resources will go to {{PREFIX}}/shared.
    # Build directory is "_nickbuild" by default,
    # use NICK_BUILDDIR env var to change it.

    echo -e "\033[1m# Publishing the app (self-contained)\033[0m"
    mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    blueprint-compiler batch-compile Blueprints/ Blueprints/ Blueprints/*.blp
    [ $? != 0 ] && exit 1
    dotnet publish -c Release {{project_name}}.GNOME.csproj \
        $([ -d "$FLATPAK_BUILDER_BUILDDIR/nuget-sources" ] && \
        echo "--source $FLATPAK_BUILDER_BUILDDIR/nuget-sources") \
        --runtime {{dotnet_runtime}} \
        --self-contained true \
        -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    success=$?
    rm Blueprints/*.ui
    if [ $success != 0 ]
    then
        exit $success
    fi
    while read lang_code; do
        echo lang $lang_code;
        mkdir -p {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}/$lang_code;
        echo msgfmt;
        msgfmt ../{{project_name}}.Shared/Resources/po/${lang_code}.po -o {{builddir}}{{PREFIX}}/{{LIB_DIR}}/{{app_id}}/$lang_code/{{short_name}}.mo;
    done < ../{{project_name}}.Shared/Resources/po/LINGUAS
    mkdir -p {{builddir}}{{PREFIX}}/bin
    cat > {{builddir}}{{PREFIX}}/bin/{{app_id}} << EOF
    #!/bin/sh
    exec {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}.GNOME \$@
    EOF
    chmod +x {{builddir}}{{PREFIX}}/bin/{{app_id}}

# Install the app
install INSTALL_PREFIX="/":
    # Installing the app to {{INSTALL_PREFIX}}
    if [ ! -d {{INSTALL_PREFIX}} ]; then mkdir -p {{INSTALL_PREFIX}}; fi
    cp -r {{builddir}}/* {{INSTALL_PREFIX}}

# Clean build directory
clean:
    # Cleaning build directory
    @rm -r {{builddir}} &> /dev/null; exit 0

# Command to be used in flatpak manifest
publish-flatpak: (publish-self-contained "/app") install

# Generate PO template file for translations
generate-pot:
    GetText.Extractor -s . -s ../{{project_name}}.Shared -s ../{{project_name}}.WinUI/ \
        -as "_" -ad "_p" -ap "_n" -adp "_pn" -t ../{{project_name}}.Shared/Resources/po/application.pot
    xgettext --from-code=UTF-8 --add-comments --keyword=_ --keyword=C_:1c,2 \
        -o ../{{project_name}}.Shared/Resources/po/{{short_name}}.pot -j Blueprints/*.blp
    xgettext -o ../{{project_name}}.Shared/Resources/po/{{short_name}}.pot -j {{app_id}}.desktop
    xgettext -o ../{{project_name}}.Shared/Resources/po/{{short_name}}.pot -j {{app_id}}.metainfo.xml

# Update PO files to match template
update-po:
    while read lang_code; do \
        msgmerge -U ../{{project_name}}.Shared/Resources/po/${lang_code}.po ./{{project_name}}.Shared/Resources/po/{{short_name}}.pot; \
    done < ../{{project_name}}.Shared/Resources/po/LINGUAS

_install_extras PREFIX: && (_translate_meta PREFIX)
    # Installing icons
    mkdir -p {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps
    cp ../{{project_name}}.Shared/Resources/{{app_id}}.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps/
    cp ../{{project_name}}.Shared/Resources/{{app_id}}-devel.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/scalable/apps/
    mkdir -p {{builddir}}{{PREFIX}}/share/icons/hicolor/symbolic/apps
    cp ../{{project_name}}.Shared/Resources/{{app_id}}-symbolic.svg \
        {{builddir}}{{PREFIX}}/share/icons/hicolor/symbolic/apps/

    # Installing GResource
    mkdir -p {{builddir}}{{PREFIX}}/share/{{app_id}}
    glib-compile-resources --sourcedir ./Resources ./Resources/{{app_id}}.gresource.xml
    mv ./Resources/{{app_id}}.gresource \
        {{builddir}}{{PREFIX}}/share/{{app_id}}/

    # Installing desktop file
    mkdir -p {{builddir}}{{PREFIX}}/share/applications
    cp ./{{app_id}}.desktop {{builddir}}{{PREFIX}}/share/applications/
    desktop-file-edit --set-key='Exec' \
    --set-value='{{PREFIX}}/bin/{{app_id}}' \
    {{builddir}}{{PREFIX}}/share/applications/{{app_id}}.desktop

    # Installing DBUS service
    mkdir -p {{builddir}}{{PREFIX}}/share/dbus-1/services
    cat > {{builddir}}{{PREFIX}}/share/dbus-1/services/{{app_id}}.service << EOF{{"\n"}}\
    [D-BUS Service]{{"\n"}}\
    Name={{app_id}}{{"\n"}}\
    Exec={{PREFIX}}/bin/{{app_id}} --gapplication-service{{"\n"}}\
    EOF

    # Installing metainfo
    mkdir -p {{builddir}}{{PREFIX}}/share/metainfo
    cp ./{{app_id}}.metainfo.xml {{builddir}}{{PREFIX}}/share/metainfo/

_translate_meta PREFIX:
    msgfmt --desktop --template={{app_id}}.desktop -o {{builddir}}{{PREFIX}}/share/applications/{{app_id}}.desktop -d ../{{project_name}}.Shared/Resources/po/
    msgfmt --xml --template={{app_id}}.metainfo.xml -o {{builddir}}{{PREFIX}}/share/metainfo/{{app_id}}.metainfo.xml -d ../{{project_name}}.Shared/Resources/po/

# Generate sources files for Flatpak
generate-flatpak-sources: _generate_flatpak_sources_just _generate_flatpak_sources_dotnet

_generate_flatpak_sources_just:
    # Generating sources for just
    curl "https://raw.githubusercontent.com/casey/just/baa2dfcc6f180d123672544c5ed1aedc32608228/Cargo.lock" -o ./Cargo.lock
    flatpak-cargo-generator.py -o cargo-sources.json ./Cargo.lock
    rm ./Cargo.lock

_generate_flatpak_sources_dotnet:
    # Generating sources for dotnet
    flatpak-dotnet-generator.py nuget-sources.json {{project_name}}.GNOME.csproj
