app_id := "org.nickvision.application"
project_name := "NickvisionApplication.GNOME"
lib := "lib" # this is added to prefix, see "publish" recipe for details

default:
    @just --list

# Run the application without installing
run:
    dotnet build
    glib-compile-resources --sourcedir ./Resources ./Resources/org.nickvision.application.gresource.xml
    mv ./Resources/org.nickvision.application.gresource ./bin/Debug/net7.0/
    dotnet run

# Install the app
publish PREFIX LIB_DIR=lib: && (_install_extras PREFIX)
    #!/bin/sh
    # LIB_DIR id added to prefix.
    # For example, for PREFIX "/usr" and LIB_DIR "lib"
    # all dll and so files will go to "/usr/lib".
    # Resources will go to {{PREFIX}}/shared.

    ARCH={{arch()}}
    if [ "$ARCH" == "x86_64" ]
    then
        RUNTIME="linux-x64"
    elif [ "$ARCH" == "arm" ]
    then
        RUNTIME="linux-arm"
    elif [ "$ARCH" == "aarch64" ]
    then
        RUNTIME="linux-arm64"
    fi

    mkdir -p {{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    dotnet publish -c Release NickvisionApplication.GNOME.csproj \
        $([ -d "./nuget-sources" ] && echo "--source ./nuget-sources") \
        $([ "$RUNTIME" ] && echo "--runtime $RUNTIME") \
        --self-contained false -o {{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    mkdir -p {{PREFIX}}/bin
    cat > {{PREFIX}}/bin/{{app_id}} << EOF
        #!/bin/sh
        exec dotnet {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}.dll
    EOF
    chmod +x {{PREFIX}}/bin/{{app_id}}

# Install the app (self-contained)
publish-self-contained PREFIX LIB_DIR=lib: && (_install_extras PREFIX)
    #!/bin/sh
    # BIN_DIR and LIB_DIR are added to prefix
    # For example, for PREFIX "/usr" and BIN_DIR "/bin" the executable will go to "/usr/bin"
    # All dll and so files will go to {{PREFIX}}/{{LIB_DIR}} (e.g. "/usr/lib")
    # Resources will go to {{PREFIX}}/shared

    ARCH={{arch()}}
    if [ "$ARCH" == "x86_64" ]
    then
        RUNTIME="linux-x64"
    elif [ "$ARCH" == "arm" ]
    then
        RUNTIME="linux-arm"
    elif [ "$ARCH" == "aarch64" ]
    then
        RUNTIME="linux-arm64"
    fi

    mkdir -p {{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    dotnet publish -c Release NickvisionApplication.GNOME.csproj \
        $([ -d "./nuget-sources" ] && echo "--source ./nuget-sources") \
        $([ "$RUNTIME" ] && echo "--runtime $RUNTIME") \
        --self-contained true -o {{PREFIX}}/{{LIB_DIR}}/{{app_id}}
    mkdir -p {{PREFIX}}/bin
    cat > {{PREFIX}}/bin/{{app_id}} << EOF
        #!/bin/sh
        exec {{PREFIX}}/{{LIB_DIR}}/{{app_id}}/{{project_name}}
    EOF
    chmod +x {{PREFIX}}/bin/{{app_id}}

_install_extras PREFIX: && (_translate_meta PREFIX)
    # Installing icons
    mkdir -p {{PREFIX}}/share/icons/hicolor/scalable/apps
    cp ../NickvisionApplication.Shared/Resources/{{app_id}}.svg \
        {{PREFIX}}/share/icons/hicolor/scalable/apps/
    cp ../NickvisionApplication.Shared/Resources/{{app_id}}-devel.svg \
        {{PREFIX}}/share/icons/hicolor/scalable/apps/
    mkdir -p {{PREFIX}}/share/icons/hicolor/symbolic/apps
    cp ../NickvisionApplication.Shared/Resources/{{app_id}}-symbolic.svg \
        {{PREFIX}}/share/icons/hicolor/symbolic/apps/

    # Installing GResource
    mkdir -p {{PREFIX}}/share/org.nickvision.application
    glib-compile-resources --sourcedir ./Resources ./Resources/org.nickvision.application.gresource.xml
    mv ./Resources/org.nickvision.application.gresource \
        {{PREFIX}}/share/org.nickvision.application/

    # Installing desktop file
    mkdir -p {{PREFIX}}/share/applications
    cp ./org.nickvision.application.desktop {{PREFIX}}/share/applications/

    # Installing metainfo
    mkdir -p {{PREFIX}}/share/metainfo
    cp ./org.nickvision.application.metainfo.xml {{PREFIX}}/share/metainfo/

_translate_meta PREFIX:
    #!/usr/bin/env python3
    import os
    import re
    import xml.etree.ElementTree as ET
    from pathlib import Path

    print("Translating desktop and metainfo files")
    resx_dir = (Path(os.getcwd()) / '../NickvisionApplication.Shared/Resources/').resolve()
    regex = re.compile(r'Strings\.(.+)\.resx')
    desktop_comments = []
    desktop_keywords = []
    meta_summaries = []
    meta_descriptions = []
    for filename in os.listdir(resx_dir):
        regex_match = regex.search(filename)
        if regex_match:
            lang_code = regex_match.group(1)
            tree = ET.parse(f'{resx_dir}/{filename}')
            root = tree.getroot()
            for item in root.findall('./data'):
                if item.attrib['name'] == 'Description':
                    text = item.find('value').text
                    if text:
                        desktop_comments.append(f'Comment[{lang_code}]={text}')
                        meta_descriptions.append(f'    <p xml:lang="{lang_code}">\n      {text}\n    </p>')
                elif item.attrib['name'] == 'Summary.GTK':
                    text = item.find('value').text
                    if text:
                        meta_summaries.append(f'  <summary xml:lang="{lang_code}">{text}</summary>')
                elif item.attrib['name'] == 'Keywords.GTK':
                    text = item.find('value').text
                    if text:
                        desktop_keywords.append(f'Keywords[{lang_code}]={text}')
    desktop_comments.sort()
    desktop_keywords.sort()
    meta_summaries.sort()
    meta_descriptions.sort()

    with open('{{PREFIX}}/share/applications/org.nickvision.application.desktop', 'r') as f:
        contents = f.readlines()
        new_contents = contents.copy()
    j = 0
    for i in range(len(contents)):
        if contents[i].startswith('Comment='):
            new_contents.insert(j + 1, "\n".join(desktop_comments) + "\n")
            j += 1
        elif contents[i].startswith('Keywords='):
            new_contents.insert(j + 1, "\n".join(desktop_keywords) + "\n")
            j += 1
        j += 1
    with open('{{PREFIX}}/share/applications/org.nickvision.application.desktop', 'w') as f:
        new_contents = "".join(new_contents)
        f.write(new_contents)

    with open('{{PREFIX}}/share/metainfo/org.nickvision.application.metainfo.xml', 'r') as f:
        contents = f.readlines()
        new_contents = contents.copy()
    j = 0
    for i in range(len(contents)):
        if contents[i].find('<summary>') > -1:
            new_contents.insert(j + 1, "\n".join(meta_summaries) + "\n")
            j += 1
        elif contents[i].find('<description>') > -1:
            new_contents.insert(j + 4, "\n".join(meta_descriptions) + "\n")
            break
        j += 1
    with open('{{PREFIX}}/share/metainfo/org.nickvision.application.metainfo.xml', 'w') as f:
        new_contents = "".join(new_contents)
        f.write(new_contents)
    print("Done!")
