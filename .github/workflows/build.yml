on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [ "review_requested", "ready_for_review" ]
  workflow_dispatch:
name: CI
jobs:
  gnome-flatpak:
    name: "GNOME on Flatpak"
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.user.login != 'weblate' }}
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged
    strategy:
      matrix:
        # As of the time of writing (February 2023), GitHub Actions only provides x86_64 runners. While Flatpak does
        # provide cross-building for other architectures, it uses QEMU to do so, and dotnet does not play well under
        # QEMU for arm64. See below links for potential updates:
        # - https://github.com/dotnet/runtime/issues/13648
        # - https://github.com/actions/runner-images/issues/5631
        arch: [x86_64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6.1
        with:
          bundle: org.nickvision.application.flatpak
          manifest-path: NickvisionApplication.GNOME/org.nickvision.application.json
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
          restore-cache: true
  fluent-windows:
    name: "Fluent on Windows"
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]
    runs-on: windows-latest
    if: ${{ github.event.pull_request.user.login != 'weblate' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x
    # Restore the application
    - name: Restore the application
      run: dotnet restore NickvisionApplication.Fluent/NickvisionApplication.Fluent.csproj
    # Build the app
    - name: Build the app
      run: dotnet build NickvisionApplication.Fluent/NickvisionApplication.Fluent.csproj --configuration $env:Configuration --no-restore --self-contained --runtime win-$env:Platform
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
    # Publish the app
    - name: Publish the app
      run: dotnet publish NickvisionApplication.Fluent/NickvisionApplication.Fluent.csproj --configuration $env:Configuration -o "${{env.DOTNET_ROOT}}/myapp" --self-contained --runtime win-$env:Platform
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
    # Upload the app
    - name: Upload app
      uses: actions/upload-artifact@v3.1.2
      with:
        name: org.nickvision.application-windows-${{ matrix.platform }}
        path: ${{env.DOTNET_ROOT}}/myapp
