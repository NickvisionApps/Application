on: ["push", "pull_request"]
name: CI
jobs:
  flatpak:
    name: "Flatpak"
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged
    strategy:
      matrix:
        # As of the time of writing (February 2023), GitHub Actions only provides x86_64 runners. While Flatpak does
        # provide cross-building for other architectures, it uses QEMU to do so, and dotnet does not play well under
        # QEMU for arm64. See below links for potential updates:
        # - https://github.com/dotnet/runtime/issues/13648
        # - https://github.com/actions/runner-images/issues/5631
        arch: [x86_64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: org.nickvision.application.flatpak
          manifest-path: NickvisionApplication.GNOME/org.nickvision.application.json
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
  winui:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]
    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    env:
      Solution_Name: NickvisionApplication.sln
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
    # Create the app by building and publishing the project
    - name: Create the app
      run: msbuild $env:Solution_Name /t:Publish /p:Configuration=$env:Configuration /p:Platform=$env:Platform
      env:
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
    # Upload the app
    - name: Upload app
      uses: actions/upload-artifact@v2
      with:
        name: Upload app
        path: ${{ env.Solution_Name }}\\bin
