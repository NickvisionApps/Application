on: ["push", "pull_request"]
name: CI
jobs:
  flatpak:
    name: "Flatpak"
    runs-on: ubuntu-latest
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-44
      options: --privileged
    strategy:
      matrix:
        # As of the time of writing (February 2023), GitHub Actions only provides x86_64 runners. While Flatpak does
        # provide cross-building for other architectures, it uses QEMU to do so, and dotnet does not play well under
        # QEMU for arm64. See below links for potential updates:
        # - https://github.com/dotnet/runtime/issues/13648
        # - https://github.com/actions/runner-images/issues/5631
        arch: [x86_64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3.5.0
      - uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          bundle: org.nickvision.application.flatpak
          manifest-path: NickvisionApplication.GNOME/org.nickvision.application.json
          cache-key: flatpak-builder-${{ github.sha }}
          arch: ${{ matrix.arch }}
  winui:
    name: "WinUI"
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, arm64]
    runs-on: windows-latest  
    env:
      Solution_Name: NickvisionApplication.sln
    steps:
    - name: Checkout
      uses: actions/checkout@v3.5.0
      with:
        fetch-depth: 0
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x
    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.3.1
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = "GitHubActionsWorkflow.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
   # Create the app package by building and packaging the project
    - name: Create the app package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:AppxPackageDir="$env:Appx_Package_Dir" /p:AppxPackageSigningEnabled=true /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Always
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: ${{ matrix.configuration }}
        Platform: ${{ matrix.platform }}
    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path GitHubActionsWorkflow.pfx
    # Upload the app
    - name: Upload app
      uses: actions/upload-artifact@v3.1.2
      with:
        name: org.nickvision.application-winui-${{ matrix.platform }}
        path: ${{ github.workspace }}\NickvisionApplication.WinUI\Packages
